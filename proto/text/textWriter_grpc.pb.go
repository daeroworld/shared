// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: textWriter.proto

package Text

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TextWriter_Generate_FullMethodName = "/TextWriter/Generate"
)

// TextWriterClient is the client API for TextWriter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextWriterClient interface {
	Generate(ctx context.Context, in *TextGenerateRequest, opts ...grpc.CallOption) (*TextGenerateResponse, error)
}

type textWriterClient struct {
	cc grpc.ClientConnInterface
}

func NewTextWriterClient(cc grpc.ClientConnInterface) TextWriterClient {
	return &textWriterClient{cc}
}

func (c *textWriterClient) Generate(ctx context.Context, in *TextGenerateRequest, opts ...grpc.CallOption) (*TextGenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextGenerateResponse)
	err := c.cc.Invoke(ctx, TextWriter_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextWriterServer is the server API for TextWriter service.
// All implementations must embed UnimplementedTextWriterServer
// for forward compatibility.
type TextWriterServer interface {
	Generate(context.Context, *TextGenerateRequest) (*TextGenerateResponse, error)
	mustEmbedUnimplementedTextWriterServer()
}

// UnimplementedTextWriterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextWriterServer struct{}

func (UnimplementedTextWriterServer) Generate(context.Context, *TextGenerateRequest) (*TextGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedTextWriterServer) mustEmbedUnimplementedTextWriterServer() {}
func (UnimplementedTextWriterServer) testEmbeddedByValue()                    {}

// UnsafeTextWriterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextWriterServer will
// result in compilation errors.
type UnsafeTextWriterServer interface {
	mustEmbedUnimplementedTextWriterServer()
}

func RegisterTextWriterServer(s grpc.ServiceRegistrar, srv TextWriterServer) {
	// If the following call pancis, it indicates UnimplementedTextWriterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextWriter_ServiceDesc, srv)
}

func _TextWriter_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextWriterServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextWriter_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextWriterServer).Generate(ctx, req.(*TextGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextWriter_ServiceDesc is the grpc.ServiceDesc for TextWriter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextWriter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TextWriter",
	HandlerType: (*TextWriterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _TextWriter_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "textWriter.proto",
}
